#!/usr/bin/env python3
import os
import sys
import click
import django

from sarge import run

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def _fail_loudly(sarge_obj):
    """
    Throw an exit(0) error when the return code from sarge runs command is
    not zero
    """
    if sarge_obj.returncode:
        sys.exit(1)


def _manage(command, args=''):
    """
    A helper that simplifies Django management command invocations
    """
    p = run('{}/manage.py {} {}'.format(BASE_DIR, command, args))
    _fail_loudly(p)


def _psql(query, no_sudo=False, is_file=False, postgresdb=False):
    """
    Dev only - used by the setup function below
    """
    sudo = 'sudo -u postgres'
    if no_sudo:
        sudo = ''

    dbflag = ''

    if postgresdb:
        dbflag = '-d postgres'

    if is_file:
        p = run('{} psql {} < {}'.format(sudo, dbflag, query))
    else:
        p = run('{} psql {} -c "{}"'.format(sudo, dbflag, query))

    _fail_loudly(p)


@click.command()
def deploy():
    """
    Build a package and upload it to the Slade 360 pip registry
    """
    p = run('python setup.py sdist upload -r slade')
    _fail_loudly(p)


@click.command()
def archive():
    """
    Create an archive in the (git) untracked /archive
    """
    os.chdir(BASE_DIR)
    p = run(
        'git archive --format=tar.gz -9 --output ' +
        BASE_DIR + '/archive/kehia.tar.gz HEAD'
    )
    _fail_loudly(p)
    click.echo('Created source archive in /archive')


@click.command()
def deploy_to_server():
    """
    Deploy to the server
    """
    os.chdir('playbooks')
    p = run('python deploy.py backend --force')
    _fail_loudly(p)


@click.command()
@click.pass_context
def reset(ctx):
    """
    Drop and recreate the DB but do not load data. Migrations should run
    """
    from config import settings
    print(settings)

    no_sudo = ctx.obj.get('NO_SUDO', False)
    db_name = settings.DATABASES.get('default').get('NAME')
    db_user = settings.DATABASES.get('default').get('USER')
    db_pass = settings.DATABASES.get('default').get('PASSWORD')

    _psql("DROP DATABASE IF EXISTS {}".format(db_name), no_sudo)
    _psql("DROP DATABASE IF EXISTS test_{}".format(db_name), no_sudo)
    _psql("DROP USER IF EXISTS {}".format(db_user), no_sudo)
    _psql("CREATE USER {0} WITH SUPERUSER CREATEDB "
          "CREATEROLE LOGIN PASSWORD '{1}'".format(db_user, db_pass), no_sudo)
    _psql('CREATE DATABASE {}'.format(db_name), no_sudo)

    _manage('migrate')


@click.command()
def load():
    """
    Loads the demo data during development

    VERY DESTRUCTIVE
    """
    # First, delete autocreated pages
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.dev")
    django.setup()

    from wagtail.wagtailcore.models import Page
    Page.objects.delete()

    # Now load data from the fixtures
    initial_data_fixture = os.path.join(
        BASE_DIR, 'fixtures/0001_initial_data.json')
    _manage('loaddata --traceback', initial_data_fixture)


@click.command()
def dump():
    """
    Dump a fixture
    """
    initial_data_fixture = os.path.join(
        BASE_DIR, 'fixtures/0001_initial_data.json')
    _manage('dumpdata', '--natural-foreign --exclude=contenttypes --exclude=auth.Permission --exclude wagtailcore.pagerevision --indent 2 > ' + initial_data_fixture)  # noqa


@click.group(chain=True, invoke_without_command=True)
@click.pass_context
@click.option(
    '--no_sudo', required=False, default=False, help='Access to psql via sudo'
)
def setup(ctx, no_sudo):
    """
    Delete the development database, recreate it, load data
    """
    ctx.obj['NO_SUDO'] = no_sudo
    ctx.invoke(reset)
    ctx.invoke(load)


@click.command()
def server():
    """
    Run a development server, listen on port 8092
    """
    _manage('runserver', args='8092')


@click.group()
def cli():
    """
    Development helpers

    These utilities help with testing, loading of data, database resets etc
    """
    pass


cli.add_command(deploy)
cli.add_command(archive)
cli.add_command(deploy_to_server)
cli.add_command(load)
cli.add_command(dump)
cli.add_command(reset)
cli.add_command(setup)
cli.add_command(server)

if __name__ == '__main__':
    cli(obj={})
